// Prisma schema for PettyGo ERP users

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  employees Employee[]
}

model Employee {
  id         Int      @id @default(autoincrement())
  name       String
  position   String
  email      String   @unique
  phone      String?
  department String?
  status     String   @default("Active")
  joinDate   DateTime @default(now())
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
  attendances Attendance[]
  leaves     Leave[]
  shifts     Shift[]
  payrolls   Payroll[]
  documents  Document[]
  performances Performance[]
  selfServices SelfService[]
  onboardings Onboarding[]
  offboardings Offboarding[]
  cases      Case[]
  compensations Compensation[]
  expenses   Expense[]
  trainingEmployees TrainingEmployee[]
  assets     Asset[]
  compliance Compliance[]
  customFormResponses CustomFormResponse[]
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
  currency   Currency? @relation(fields: [currencyId], references: [id])
  currencyId Int?
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  date       DateTime
  status     String
  checkIn    String?
  checkOut   String?
  location   String?
  ip         String?
  approved   Boolean  @default(false)
}

model Leave {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  type       String
  from       DateTime
  to         DateTime
  status     String   @default("Pending")
  balance    Int?
}

model Shift {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  name       String
  start      String
  end        String
}

model Payroll {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  period     String
  amount     Float
  status     String   @default("Processed")
}

model Document {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  type       String
  name       String
  status     String   @default("Uploaded")
}

model Performance {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  goal       String
  score      Float?
  period     String
  feedback   String?
  status     String   @default("Pending")
}

model SelfService {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  action     String
  status     String   @default("Pending")
}

model Report {
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  status     String   @default("Ready")
  createdAt  DateTime @default(now())
}

// Onboarding & Offboarding
model Onboarding {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  startDate  DateTime
  checklist  String?
  status     String   @default("Initiated")
}

model Offboarding {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  endDate    DateTime
  checklist  String?
  status     String   @default("Initiated")
}

// Case Management (HR Helpdesk)
model Case {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  subject    String
  description String
  status     String   @default("Open")
  createdAt  DateTime @default(now())
}

// Compensation Management
model Compensation {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  type       String
  amount     Float
  effectiveDate DateTime
  status     String   @default("Active")
}

// Travel & Expense Management
model Expense {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  type       String
  amount     Float
  description String?
  status     String   @default("Pending")
  submittedAt DateTime @default(now())
}

// Training & Development
model Training {
  id         Int      @id @default(autoincrement())
  name       String
  description String?
  startDate  DateTime
  endDate    DateTime
  employees  TrainingEmployee[]
}

model TrainingEmployee {
  id         Int      @id @default(autoincrement())
  training   Training @relation(fields: [trainingId], references: [id])
  trainingId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  status     String   @default("Enrolled")
}

// Asset Management
model Asset {
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  assignedTo Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?
  status     String   @default("Available")
}

// Compliance Management
model Compliance {
  id         Int      @id @default(autoincrement())
  policy     String
  acknowledgedBy Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?
  acknowledgedAt DateTime?
}

// Custom Forms
model CustomForm {
  id         Int      @id @default(autoincrement())
  name       String
  fields     String   // JSON schema
  responses  CustomFormResponse[]
}

model CustomFormResponse {
  id         Int      @id @default(autoincrement())
  form       CustomForm @relation(fields: [formId], references: [id])
  formId     Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  response   String   // JSON
  submittedAt DateTime @default(now())
}

// Multi-location & Multi-currency
model Location {
  id         Int      @id @default(autoincrement())
  name       String
  address    String?
  employees  Employee[]
}

model Currency {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  name       String
  symbol     String
  employees  Employee[]
}
